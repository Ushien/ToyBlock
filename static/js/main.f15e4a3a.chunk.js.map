{"version":3,"sources":["blockchain.js","Test.js","App.js","Blocs.js","reportWebVitals.js","index.js"],"names":["Transaction","from","to","amount","validated","this","console","assert","Carnet","property","startmoney","animals","transactions","currentAccounts","neighbors","index","length","villagers","i","push","transaction","applyTransaction","log","getFrom","getAmount","getTo","additionalTransaction","validity","newAccounts","account","checkAccount","addTransaction","transmitTransaction","exclude","isValidated","sendTransaction","destination","getMillisecondsFromDistance","setTimeout","receiveTransaction","distance","Village","getCarnets","setNeighbors","getCarnet","VillageBlock","Component","props","state","startMoney","village","getStartMoney","carnets","e","newCarnets","key","setState","getTransactions","getProperty","onClick","clickMe","bind","SHA256","require","hashing","number","toString","HashingBlock","handleChange","hashword","target","value","hashed","baseword","className","type","onChange","class","HandlingBlock","incrementDistance","changeName","moneyname","newname","fulltext","onDistanceChange","onNameChange","BlocIntro1","handleClick","document","addEventListener","removeEventListener","BlocIntro2","BlocIntro3","BlocIntro4","handleSubmit","onSubmit","Bloc1","event","scrollingElement","Math","abs","scrollHeight","scrollTop","clientHeight","Bloc2","Bloc3","Bloc4","Bloc5","Bloc6","Bloc7","Bloc8","Bloc9","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f15e4a3a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n// Village and transactions machines\r\n\r\n// Class definition\r\n\r\nconst animals = [\"Paresseux\", \"Pingouin\", \"Toucan\", \"Grenouille\", \"Singe\", \"Chat\"]\r\nconst neighbors = {\"Paresseux\" : {\"Toucan\" : 2, \"Grenouille\" : 2}, \"Pingouin\" : {\"Grenouille\" : 1}, \"Toucan\" : {\"Paresseux\" : 2, \"Chat\" : 1}, \"Grenouille\" : {\"Paresseux\" : 2, \"Singe\" : 1 ,\"Pingouin\" : 1}, \"Singe\" : {\"Grenouille\" : 1}, \"Chat\" : {\"Toucan\" : 1}}\r\n\r\nclass Transaction{\r\n        constructor(from, to, amount, validated){\r\n                this.from = from;\r\n                this.to = to;\r\n                this.amount = amount;\r\n                this.validated = validated;\r\n        }\r\n\r\n        isValidated(){\r\n                return this.validated;\r\n        }\r\n\r\n        getAmount(){\r\n                return this.amount;\r\n        }\r\n\r\n        getFrom(){\r\n                return this.from;\r\n        }\r\n\r\n        getTo(){\r\n                return this.to;\r\n        }\r\n\r\n        validate(){\r\n                console.assert(this.from != this.to, \"Sender and receiver are the same\");\r\n                console.assert(this.amount >= 0, \"Amount is negative\")\r\n                this.validated = true;\r\n        }\r\n}\r\n\r\nclass Carnet{\r\n        constructor(property, startmoney, animals){\r\n                this.property = property;\r\n                this.transactions = [];\r\n                this.startmoney = startmoney;\r\n                this.currentAccounts = {}\r\n                this.neighbors = {};\r\n\r\n                for (let index = 0; index < animals.length; index++){\r\n                        this.currentAccounts[animals[index]] = startmoney;\r\n                }\r\n        }\r\n\r\n        setNeighbors(neighbors, villagers){\r\n                for (var i in neighbors){\r\n                        this.neighbors[i] = []\r\n                        this.neighbors[i].push(villagers[i])\r\n                        this.neighbors[i].push(neighbors[i])\r\n                }\r\n                \r\n        }\r\n\r\n        addTransaction(transaction){\r\n                this.transactions.push(transaction)\r\n                // console.assert(this.transactions.filter().length < 2)\r\n                this.applyTransaction(transaction)\r\n                console.log(\"Transaction added and applied\")\r\n                \r\n        }\r\n\r\n        applyTransaction(transaction){\r\n                this.currentAccounts[transaction.getFrom()] = this.currentAccounts[transaction.getFrom()] - transaction.getAmount();\r\n                this.currentAccounts[transaction.getTo()] = this.currentAccounts[transaction.getTo()] + transaction.getAmount();\r\n        }\r\n\r\n        getTransactions(){\r\n                return this.transactions\r\n        }\r\n\r\n        getProperty(){\r\n                return this.property\r\n        }\r\n\r\n        // Vérifie qu'une nouvelle transaction est compatible avec les transactions déjà en place.\r\n        checkAccount(additionalTransaction){\r\n\r\n                let validity = true;\r\n\r\n                let newAccounts = {};\r\n                for (let account in this.currentAccounts) {\r\n                        newAccounts[account] = this.currentAccounts[account];\r\n                      }\r\n        \r\n                newAccounts[additionalTransaction.getFrom()] = newAccounts[additionalTransaction.getFrom()] - additionalTransaction.getAmount();\r\n                newAccounts[additionalTransaction.getTo()] = newAccounts[additionalTransaction.getTo()] + additionalTransaction.getAmount();  \r\n\r\n                for(let account in newAccounts){\r\n                        if(newAccounts[account] < 0){\r\n                                validity = false;\r\n                        }\r\n                }\r\n\r\n                return validity;\r\n        \r\n        }\r\n\r\n        receiveTransaction(transaction, from){\r\n\r\n                //vérifie que la transaction est compatible avec les autres\r\n                //si oui, l'ajoute, si non, envoie une erreur\r\n\r\n                if (!this.checkAccount(transaction)){\r\n                        throw \"An invalid transaction has been received !\"\r\n                }\r\n\r\n                this.addTransaction(transaction)\r\n        \r\n                //transmet ensuite la transaction aux voisins, sauf au from\r\n                this.transmitTransaction(transaction, from)\r\n        }\r\n\r\n        transmitTransaction(transaction, exclude){\r\n                console.assert(transaction.isValidated(), \"Trying to transmit a invalidated transaction\");\r\n\r\n                for (var i in this.neighbors){\r\n                        if (i !== exclude){\r\n                                console.log(\"On envoie la transaction de \")\r\n                                console.log(this.property)\r\n                                this.sendTransaction(transaction, this.neighbors[i]) \r\n                                console.log(\"La transaction de ... est envoyée\")\r\n                                console.log(this.property)\r\n                        }\r\n                }\r\n        }\r\n\r\n        sendTransaction(transaction, destination){\r\n                //envoie une transaction à un autre carnet, après avoir attendu le temps qu'il faut\r\n                console.log(this.getMillisecondsFromDistance(destination[1]))\r\n                setTimeout(() => {destination[0].receiveTransaction(transaction, this.property)} , this.getMillisecondsFromDistance(destination[1]));\r\n        }\r\n\r\n        getMillisecondsFromDistance(distance){\r\n                // return distance * 1000\r\n                return 4000\r\n        }\r\n\r\n}\r\n\r\nclass Village{\r\n        constructor(startmoney = 0, animals = [], neighbors = {}){\r\n                this.startmoney = startmoney;\r\n                this.villagers = {};\r\n\r\n                // Creatings villagers transaction lists\r\n                for (let index = 0; index < animals.length; index++) {\r\n                        this.villagers[animals[index]] = new Carnet(animals[index], startmoney, animals)\r\n                }\r\n\r\n                // Assigning neighbors\r\n                for (let index = 0; index < animals.length; index++) {\r\n                        this.getCarnets()[animals[index]].setNeighbors(neighbors[animals[index]], this.getCarnets())\r\n                }\r\n        }\r\n\r\n        getCarnets(){\r\n                return this.villagers;\r\n        }\r\n\r\n        getCarnet(property){\r\n                return this.villagers[property];\r\n        }\r\n\r\n        getStartMoney(){\r\n                return this.startmoney;\r\n        }\r\n\r\n        addTransaction(property, from, to, amount, validated){\r\n                this.getCarnet(property).addTransaction(new Transaction(from, to, amount, validated))\r\n        }\r\n}\r\n\r\n// Component displaying a transaction list\r\n\r\nclass CarnetBlock extends Component {\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {carnet : this.props.carnet}\r\n        }\r\n\r\n        //ajouter une fonction pour valider et transmettre une transaction\r\n\r\n                \r\n        render(){\r\n                var fulltext = []\r\n                /*for (let index = 0; index < this.state.carnet.getTransactions().length; index++) {\r\n                        fulltext.push(<div> {this.state.carnet.getTransactions()[index].getAmount()} <button onClick={}>{this.state.carnet.getProperty()}</button></div>);\r\n                    }\r\n                    */\r\n                return(\r\n                        <div>\r\n                                Yes\r\n                        </div>\r\n                )\r\n        }\r\n\r\n}\r\n\r\n//Component displaying a transaction line\r\n\r\nclass TransactionLine extends Component{\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {transaction : this.state.transaction}\r\n        }\r\n\r\n        handleChangeAmount = (e) => {\r\n                this.setState({amount : (e.target.value)})\r\n                }\r\n\r\n        validate = (e) => {\r\n\r\n        }\r\n                \r\n        render(){\r\n                if (this.state.validated){\r\n                        return(\r\n                                <div className=\"centeredtext\">\r\n                                        {this.state.amount}\r\n                                </div>\r\n                        )\r\n                }\r\n                else{\r\n                        return(\r\n                                <div className=\"centeredtext\">\r\n                                        <form>\r\n                                                <input type=\"text\" value={this.state.amount} onChange={this.handleChangeAmount} class=\"input\"/>\r\n                                        </form>\r\n                                        {this.state.amount}\r\n                                </div>\r\n                        )\r\n                }\r\n                \r\n        }\r\n}\r\n\r\n//Component displaying a transaction line\r\n\r\nclass VillageBlock extends Component {\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {startMoney: this.props.village.getStartMoney(), carnets : this.props.village.getCarnets()}\r\n        }\r\n\r\n        clickMe(e){\r\n                //let newVillage = Object.assign({}, this.state.village);\r\n\r\n                let newCarnets = {};\r\n                        console.log(\"Wow\")\r\n                        console.log(this.state.carnets)\r\n                        console.log(newCarnets)\r\n                for (let key in this.state.carnets) {\r\n                        newCarnets[key] = this.state.carnets[key]; // copies each property to the objectCopy object\r\n                }\r\n                // let newVillage = this.state.village;\r\n                /*console.log(this.state.village[\"villagers\"][\"Grenouille\"][\"currentAccounts\"])\r\n                console.log(newVillage[\"villagers\"][\"Grenouille\"][\"currentAccounts\"])*/\r\n                        console.log(\"Wow2\")\r\n                        console.log(this.state.carnets)\r\n                        console.log(newCarnets)\r\n                // newVillage.addTransaction(\"Grenouille\", \"Paresseux\", \"Pingouin\", 3, true);\r\n                newCarnets[\"Grenouille\"].addTransaction(new Transaction(\"Paresseux\", \"Pingouin\", 3, true))\r\n                        console.log(\"Wow3\")\r\n                        console.log(this.state.carnets)\r\n                        console.log(newCarnets)\r\n                this.setState({ carnets : newCarnets })\r\n        }\r\n                \r\n        render(){\r\n                /*\r\n                var fulltext = []\r\n\r\n                for (let index in this.state.village.getCarnets()) {\r\n                        if(this.state.village.getCarnets()[index].getTransactions()[\"Chat\"] > 10){\r\n                                fulltext.push(<li> {this.state.village.getCarnets()[index].getProperty()} - Bien reçu ! </li>);\r\n                        }\r\n                        else{\r\n                                fulltext.push(<li> {this.state.village.getCarnets()[index].getProperty()} - Pas reçu </li>);\r\n                        }\r\n                    }\r\n                */\r\n\r\n                if(this.state.carnets['Grenouille'].getTransactions()[\"Chat\"] > 10){\r\n                        return (<div> {this.state.carnets['Grenouille'].getProperty()} - Bien reçu ! <button onClick={this.clickMe.bind(this)}>Click me</button></div>);\r\n                }\r\n                else{\r\n                        return (<div> {this.state.carnets['Grenouille'].getProperty()} - Pas reçu <button onClick={this.clickMe.bind(this)}>Click me</button></div>);\r\n                }\r\n\r\n                /*\r\n                console.log(this.state.village)\r\n\r\n                return(\r\n                        <ul onClick={() => this.clickMe()}>\r\n                                {fulltext}\r\n                        </ul>\r\n                )\r\n                */\r\n        }\r\n\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n\r\n// Hashing machine\r\n\r\nconst SHA256 = require(\"crypto-js/sha256\");\r\n\r\nfunction hashing(number){\r\n        return SHA256(number).toString()\r\n}\r\n\r\nclass HashingBlock extends Component {\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {hashword : this.props.baseword, hashed : hashing(this.props.baseword)}\r\n        }\r\n        \r\n        handleChange = (e) => {\r\n                this.setState({hashword : (e.target.value)})\r\n                this.setState({hashed : hashing(e.target.value)})\r\n        }\r\n        \r\n        render(){\r\n                return(\r\n                        <div className=\"centeredtext\">\r\n                                <form>\r\n                                        <input type=\"text\" value={this.state.hashword} onChange={this.handleChange} class=\"input\"/>\r\n                                </form>\r\n                                <div class=\"centeredelement\">\r\n                                <div class=\"output\">\r\n                                        {this.state.hashed}\r\n                                </div>\r\n                                </div>\r\n                        </div>\r\n                )\r\n        }\r\n}\r\n\r\nexport {hashing, HashingBlock, TransactionLine, Transaction, CarnetBlock, Carnet, Village, VillageBlock, animals, neighbors}","import React, { Component } from 'react'\r\nimport {Transaction, CarnetBlock, Carnet, animals, neighbors, VillageBlock, Village } from './blockchain';\r\n\r\nlet village = new Village(10, animals, neighbors);\r\n//village.addTransaction(\"Grenouille\", \"Paresseux\", \"Toucan\", 6, true)\r\n//village.addTransaction(\"Grenouille\", \"Paresseux\", \"Chat\", 3, true)\r\n//village.addTransaction(\"Grenouille\", \"Paresseux\", \"Grenouille\", 15, true)\r\n//let grencarnet = village.getCarnet(\"Grenouille\");\r\n//grencarnet.transmitTransaction(grencarnet.getTransactions()[0], \"Singe\")\r\n// grencarnet.transmitTransaction(grencarnet.getTransactions()[1], \"Singe\")\r\n\r\n\r\nclass BlocTest extends Component{\r\n\r\n  render(){\r\n    return <div>\r\n      <VillageBlock village={village}/>\r\n      </div>\r\n  }\r\n\r\n}\r\n\r\nexport {BlocTest}","// Imports\r\n\r\nimport './App.css';\r\nimport React, { Component } from 'react'\r\nimport {introtext1, introtext2, introtext3, introtext4, text1, text2, text3, text4, text5, text6, text6_1, text7, text8, text9} from './Blocs.js'\r\nimport {HashingBlock} from './blockchain.js'\r\nimport {BlocTest} from './Test.js'\r\n\r\n/*\r\nHere you can change the base parameters of the website\r\n\r\nPick another startdistance if you want to start the story further (From 1 to 13)\r\nPick another defaultname if you want to change the default name of the currency\r\nPick another baseword if you can to change the default word of the hash machine\r\nSet test to true if you want to load a test version of the website\r\n*/\r\nconst startdistance = 1\r\nconst defaultname = \"Toycoin\"\r\nconst baseword = \"Bonjour\"\r\n\r\nconst test = false\r\n\r\nclass HandlingBlock extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.incrementDistance = this.incrementDistance.bind(this)\r\n    this.changeName = this.changeName.bind(this)\r\n    this.state = {distance: startdistance, moneyname: defaultname};\r\n    console.log(\"Voici l'état initial du state\")\r\n    console.log(this.state)\r\n  }\r\n\r\n  incrementDistance() {\r\n    if(this.state.distance < 13){\r\n      console.log(\"We move forward in the document. New distance:\");\r\n      console.log(this.state.distance);\r\n      this.setState({distance: this.state.distance+1});\r\n    }\r\n    console.assert(this.state.distance <= 13)\r\n  }\r\n\r\n  changeName(newname) {\r\n    console.log(\"This is the old money name: \" + this.state.moneyname)\r\n    this.setState({moneyname: newname})\r\n    console.log(\"The name is changed to \" + this.state.moneyname)\r\n  }\r\n\r\n  render(){ \r\n    if(test){\r\n      return <BlocTest/>\r\n    }\r\n\r\n    var fulltext = [];\r\n\r\n    if (this.state.distance === 1){\r\n      console.log(\"Entered Intro Block 1\")\r\n      return (\r\n      <div> <BlocIntro1 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n      </div>\r\n      )  \r\n    }\r\n    if (this.state.distance ===2){\r\n      console.log(\"Entered Intro Block 2\")\r\n      return (\r\n      <div>\r\n        <BlocIntro2 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n      </div>\r\n      )\r\n    }\r\n    if (this.state.distance ===3){\r\n      console.log(\"Entered Intro Block 3\")\r\n      return (\r\n      <div><BlocIntro3 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n      </div>\r\n      )\r\n    }\r\n    if (this.state.distance ===4){\r\n      console.log(\"Entered Intro Block 4\")\r\n      return (\r\n      <div><BlocIntro4 onDistanceChange={this.incrementDistance} onNameChange={this.changeName} distance={this.state.distance} moneyname={this.state.moneyname}/>\r\n      </div>\r\n      )\r\n    }\r\n    if (this.state.distance >= 5){\r\n      console.log(\"Entered Block 1\")\r\n      fulltext.push(<div><Bloc1 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >= 6){\r\n      console.log(\"Entered Block 2\")\r\n      fulltext.push(<div>\r\n        <Bloc2 onDistanceChange={this.incrementDistance} distance={this.state.distance} moneyname={this.state.moneyname}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=7){\r\n      console.log(\"Entered Block 3\")\r\n      fulltext.push(<div><Bloc3 onDistanceChange={this.incrementDistance} distance={this.state.distance} moneyname={this.state.moneyname}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=8){\r\n      console.log(\"Entered Block 4\")\r\n      fulltext.push(<div><Bloc4 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=9){\r\n      console.log(\"Entered Block 5\")\r\n      fulltext.push(<div><Bloc5 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=10){\r\n      console.log(\"Entered Block 6\")\r\n      fulltext.push(\r\n        <div>\r\n          <div>\r\n            <Bloc6 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n          </div>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=11){\r\n      console.log(\"Entered Block 7\")\r\n      fulltext.push(<div><Bloc7 onDistanceChange={this.incrementDistance} distance={this.state.distance} moneyname={this.state.moneyname}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=12){\r\n      console.log(\"Entered Block 8\")\r\n      fulltext.push(<div><Bloc8 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=13){\r\n      console.log(\"Entered Block 9\")\r\n      fulltext.push(<div><Bloc9 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n\r\n    fulltext.push(<div><br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> </div>)\r\n\r\n    return fulltext;\r\n  }\r\n}\r\n\r\nclass BlocIntro1 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener('mousedown', this.handleClick, false);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener('mousedown', this.handleClick, false);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"The screen is clicked\")\r\n    this.props.onDistanceChange();\r\n  }\r\n\r\n  render(){\r\n    return <div class=\"centeredscreen\">\r\n    <div class=\"paragraph centeredtext\"> \r\n    <div>\r\n      {introtext1()}\r\n    </div>\r\n    </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass BlocIntro2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener('mousedown', this.handleClick, false);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener('mousedown', this.handleClick, false);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"The screen is clicked\")\r\n    this.props.onDistanceChange();\r\n  }\r\n  render(){\r\n    return <div class=\"centeredscreen\">\r\n    <div class=\"paragraph centeredtext\"> \r\n    <div>\r\n      {introtext2()}\r\n    </div>\r\n    </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass BlocIntro3 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"The button is clicked\")\r\n    this.props.onDistanceChange();\r\n  }\r\n\r\n  render(){\r\n    return <div class=\"centeredscreen\">\r\n      <div class=\"paragraph centeredtext\">\r\n      <div>{introtext3()}</div>\r\n      <div class=\"button\" onClick={() => this.handleClick()}>Allons-y</div>\r\n      </div>\r\n      </div>\r\n  }\r\n}\r\n\r\nclass BlocIntro4 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    console.log(\"The form is submitted\")\r\n    this.props.onDistanceChange();\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.props.onNameChange(e.target.value);\r\n  }\r\n\r\n  render(){\r\n    return <div class=\"centeredscreen\">\r\n    <div class=\"paragraph centeredtext\">\r\n      <div>{introtext4()}</div>\r\n      \r\n      <form onSubmit={this.handleSubmit} class=\"marged\">\r\n        <input type=\"text\" value={this.props.moneyname} onChange={this.handleChange} class=\"input\"/>\r\n        <input type=\"submit\" value=\"Choisir ce nom\" class=\"button\" />\r\n      </form>\r\n    </div>\r\n    </div>\r\n  }\r\n}\r\n\r\n/* END OF THE INTRO */\r\n\r\nclass Bloc1 extends Component { //Notation des transactions\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener('scroll', this.handleClick, false);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener('scroll', this.handleClick, false);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    const event = e.target.scrollingElement;\r\n    console.log(\"The screen is scrolled\");\r\n    //const bottom = e.target.scrollingElement.scrollHeight - e.target.scrollingElement.scrollTop === e.target.scrollingElement.clientHeight;\r\n    const bottom = Math.abs(event.scrollHeight - (event.scrollTop + event.clientHeight)) <= 1;\r\n\r\n    if (bottom){\r\n      console.log(\"Enter the condition\")\r\n      this.props.onDistanceChange();\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return ( <div class=\"paragraph\"> <br/> <br/> <br/> <div>{text1()}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc2 extends Component { //Décentralisation de la monnaie\r\n\r\n  render(){\r\n    return (<div class=\"paragraph\"> <br/> <br/> <br/> <div>{text2(this.props.moneyname)}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc3 extends Component { //Signature électronique\r\n\r\n  render(){\r\n    return (\r\n    <div class=\"paragraph\"> <br/> <br/> <br/> \r\n      <div>\r\n        {text3(this.props.moneyname)}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc4 extends Component { //Listes d'attentes\r\n\r\n  render(){\r\n    return (<div class=\"paragraph\"> <br/> <br/> <br/> <div>{text4(this.props.moneyname)}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc5 extends Component { //Blockchain\r\n\r\n  render(){\r\n    return (<div class=\"paragraph\"> <br/> <br/> <br/> <div>{text5()}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc6 extends Component { //Proof of work\r\n\r\n  render(){\r\n    return (\r\n    <div> <br/> <br/> <br/> \r\n      <div class=\"paragraph\">\r\n        {text6()}\r\n      </div>\r\n      <div class = \"machine\">\r\n        <div class = \"paragraph\">\r\n        Tu peux essayer de hasher tes propres mots ! Tu peux par exemple essayer de hasher ton prénom.\r\n        </div>\r\n        <div>\r\n        <HashingBlock baseword = {baseword}/>\r\n        </div>\r\n        <div class = \"paragraph\">\r\n        Voici un petit défi : Essaie de trouver un mot dont le hash commence par le chiffre 5.\r\n        </div>\r\n      </div>\r\n      <div class=\"paragraph\">\r\n        {text6_1()}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc7 extends Component { //Rétribution\r\n\r\n  render(){\r\n    return (<div class=\"paragraph\"> <br/> <br/> <br/> <div>{text7(this.props.moneyname)}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc8 extends Component { //Travail d'équipe\r\n  \r\n  render(){\r\n    return (\r\n    <div class=\"paragraph\"> <br/> <br/> <br/> \r\n      <div>\r\n        {text8()}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc9 extends Component { //Conclusion\r\n  \r\n  render(){\r\n    return (\r\n    <div class=\"paragraph\"> <br/> <br/> <br/> \r\n      <div>\r\n        {text9()}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <HandlingBlock />\r\n  }\r\n}\r\n\r\nexport default App;\r\n","function introtext1(){\r\n        return(<div>\r\n                Au beau milieu de la forêt se trouve un village...\r\n        </div>\r\n        )\r\n}\r\n\r\nfunction introtext2(){\r\n        return(<div>\r\n                Peuplé de petits animaux sympathiques...\r\n        </div>\r\n        )\r\n}\r\n\r\nfunction introtext3(){\r\n        return(<div>\r\n                <div>\r\n                Les pommes de pin ça prend beaucoup de place dans les poches... Et si on créait une vraie monnaie ?\r\n                </div>\r\n                <div>\r\n                Êtes-vous prêt à leur donner un coup de main ?\r\n                </div>\r\n        </div>\r\n\r\n        )\r\n}\r\n\r\nfunction introtext4(){\r\n        return(<div>\r\n                Commençons par choisir un nom pour cette monnaie révolutionnaire. Sois créatif ! :\r\n        </div>\r\n        )\r\n}\r\n\r\nfunction text1(){\r\n        return(<div>\r\n                <div>\r\n                Le chef du village achète un carnet qui répertorie chaque transaction, afin de pouvoir déduire automatiquement combien chaque habitant peut encore dépenser. \r\n                Les animaux le préviennent qu’ils veulent faire une transaction, et il l’écrit pour eux.\r\n                </div> \r\n\r\n                <div class =\"problem\">\r\n                Problème:\r\n                </div>\r\n                <div>\r\n                Si quelqu’un de malhonnête accède au carnet du chef, la liste de transactions pourrait être modifiée, voire pire : brûlée !\r\n                </div>\r\n        </div>\r\n        )\r\n        // On place la machine 1 (carnet) avant le problème\r\n}\r\n\r\nfunction text2(moneyname){\r\n        return(<div>\r\n                <div>\r\n                Utilisons le même système de carnets, mais donnons un carnet à chaque habitant qui veut pouvoir échanger sa monnaie. Une fois que 2 animaux se sont mis d’accord sur une transaction, ils l’écrivent dans leur fichier propre, et envoient une lettre à tous les habitants du village : « Attention, inscrivez que Pingouin a donné 2 {moneyname}s à Paresseux ». Dès que quelqu'un reçoit une transaction par lettre, il l'inscrit dans son propre carnet.\r\n                </div> \r\n                <div class =\"problem\">\r\n                Problème:\r\n                </div>\r\n                <div>\r\n                Renard a vite besoin d’argent pour acheter une tarte. Il écrit dans une lettre : « Inscrivez tous que Grenouille m’a donné 100 {moneyname}s ! ». Le reste du village reçoit la lettre, et ils copient la transaction dans leur carnet. \r\n                N’importe qui peut inscrire des transactions fausses et le reste du village va les copier !\r\n                </div>\r\n        </div>\r\n\r\n        )\r\n}\r\n\r\nfunction text3(moneyname){\r\n        return(<div>\r\n                <div>\r\n                Chaque nouvel habitant qui souhaite rejoindre le système reçoit 2 choses : \r\n                1 : Un modèle de serrure personnelle top secrète.\r\n                2 : Un trousseau de clés, une pour chaque habitant du village.\r\n                Avant d’écrire une transaction dans une lettre, et de la transmettre, Pingouin sécurise sa lettre en la mettant dans un coffre, avec sa serrure propre. Personne d’autre ne peut réaliser la même serrure que lui. Pour savoir qui a envoyé la lettre, ils testent toutes les clés qu’ils possèdent et comprennent vite que, vu que la clé de pingouin fonctionne, ça ne peut être que Pingouin qui a rédigé cette transaction. Une fois que la lettre est transmise, à l’intérieur de son coffre, les animaux la copient dans leur carnet.\r\n                </div> \r\n                <div class =\"problem\">\r\n                Problème:\r\n                </div>\r\n                <div>\r\n                Cette fois-ci, Renard a envie d’un cookie, et d’un jus de fruits, coûtant 5 {moneyname}s chacun ! Problème : Renard est presque à sec, il ne lui reste que 5 {moneyname}s. Pourtant, il a très envie d’acheter les deux douceurs. Il trouve une stratégie.\r\n                Renard prépare 2 lettres : L’une d’elle dit qu’il a dépensé 5 {moneyname}s dans un cookie, l’autre qu’il les a dépensés dans un jus de fruit. Il les enferme dans leur coffre, avec la serrure renard. Il commence par acheter un cookie d'un côté du village, envoie sa première lettre, et court vite de l’autre côté pour acheter un jus de fruit, et envoyer la deuxième.\r\n                Pingouin reçoit d’abord la première lettre. Il vérifie dans son carnet, et voit que Renard a acheté un cookie avec ses 5 derniers {moneyname}s. Il note l’info, et retransmet la lettre au reste du village. Pendant ce temps-là, de l’autre côté, Paresseux reçoit la lettre numéro 2. Il vérifie, selon son carnet, Renard possède encore 5 {moneyname}s. Il ne voit donc aucun problème à inscrire la transaction !\r\n                Ca y est, Renard a réussi à mettre des infos contradictoires en circulation dans le village.\r\n                </div>\r\n        </div>          \r\n\r\n        // Dessin serrures coffre ?\r\n        )\r\n}\r\n\r\nfunction text4(moneyname){\r\n        return(<div>\r\n                <div>\r\n                Solution : Listes d’attentes\r\n                On donne à chaque habitant, en plus de son carnet, un petit tableau et une craie pour noter les transactions en attente de validation. Dès que Pingouin reçoit une transaction dans une lettre, il l’écrit, non plus dans son carnet, mais à la craie sur son petit tableau. Ainsi, tous les jours à 18 heures, le chef du village choisit une liste d’attente au hasard, par exemple celle de Paresseux, et fait une annonce au village pour dire que la liste d’attente de paresseux a été choisie comme liste officielle. Après ça, tout le monde recopie les transactions de cette liste d’attente dans son carnet. Une fois que c'est fait, tout le monde efface son tableau et on est sûrs que tout le monde possède exactement la même liste.\r\n                </div> \r\n                <div class =\"problem\">\r\n                Problème:\r\n                </div>\r\n                <div>\r\n                Renard pourrait écrire des informations fausses sur son tableau. Il pourrait par exemple inscrire que tout le monde lui a donné 100 {moneyname}s, et il existe une petite chance qu’il soit un jour choisi au hasard. Tout le monde recopierait des informations fausses !\r\n                </div>\r\n        </div>         \r\n        )\r\n}\r\n\r\nfunction text5(){\r\n        return(<div>\r\n                <div>\r\n                Le village se met d’accord sur un nouveau système. Chaque tableau noir possède, en plus de sa liste d’attente, un chiffre, commun à tout le monde. Ce chiffre s’appelle l’identifiant. \r\n                Imaginons que tout le monde reçoive le chiffre 10.\r\n                Le chef du village annonce une règle : « Le premier qui trouve l’identifiant suivant gagne le droit d’imposer sa liste d’attente à tout le reste du village ! »\r\n                Il ajoute : « Pour trouver l’identifiant suivant, il suffit de multiplier l’identifiant actuel par 8 »\r\n                Tous les habitants savent que Renard veut inscrire des bêtises dans les transactions, donc ils se pressent tous pour être le premier à réussir la multiplication. Paresseux finit par trouver le résultat, après quelques minutes de recherche. Il écrit immédiatement le nombre qu’il a trouvé : 80, et sa liste d’attente sur le panneau d’affichage du village. Pingouin était en train de calculer, mais il voit l’annonce. Il vérifie, et voit très vite que, effectivement, l’identifiant trouvé par Paresseux est correct. Tout le monde arrive à la même conclusion, et la liste d’attente de Paresseux est donc recopiée par tout le village. \r\n                Pour connaître qui sera le prochain à imposer sa liste, le village prend l’identifiant trouvé par Paresseux comme nouvel identifiant. Ce sera donc celui qui trouve 80 multiplié par 8 qui pourra proposer sa liste. Et cetera !\r\n                On a donc créé des listes d’attentes liées entre elles par leur identifiant, comme les maillons d’une chaîne. Chaque liste d’attente représente un bloc, on vient donc de créer ce qui s’appelle une blockchain.\r\n                </div> \r\n                <div class =\"problem\">\r\n                Problème:\r\n                </div>\r\n                <div>\r\n                Le calcul proposé par le chef du village est un peu facile… Comme Renard est malin, il calcule à l’avance tous les résultats, en peut désormais proposer des listes d’attentes fausses. En bref, c'est l'habitant le plus rapide en calcul qui impose ce qu'il veut, au final.\r\n                </div>\r\n        </div>              \r\n        )\r\n}\r\n\r\nfunction text6_1(){\r\n        return(<div>\r\n                <div>\r\n                Le chef du village décide de débloquer un peu de budget, et il offre un ordinateur à chaque habitant du village un ordinateur avec un programme de hashage !\r\n\r\n                Comme vu juste avant, un identifiant et une liste de transactions forment donc un bloc. On colle ces deux éléments à un nombre inconnu appelé le nonce. Ensemble, ils forment un gros texte !\r\n                L’objectif est simple, il faut hasher le texte formé par ces 3 données, et trouver un nouveau texte qui respecte une condition fixée. Par exemple, le chef annonce : « Le résultat du hashage doit débuter par abc ! »\r\n                Par exemple, le résultat abc55cc22 serait un résultat satisfaisant.\r\n                Comme il est impossible de retrouver un texte initial à partir d’un résultat de hashage, il n’y a qu’une seule possibilité pour résoudre ce problème : Tester toutes les valeurs possibles pour le nonce, et regarder si le hashage correspondant respecte la règle mise en place, le plus vite possible.\r\n                </div> \r\n                <div>\r\n                Si un habitant trouve un nombre acceptable, on appelle alors cela la proof of work, il gagne le droit de transmettre sa liste d’attente à tout le village. Le résultat du hashage, lui, devient l’identifiant du bloc suivant.  \r\n                La fraude devient pratiquement impossible, car Renard n’a pas le temps de tester des nombres au hasard toute la journée. Et même s’il le faisait, il a peu de chances de tomber dessus.\r\n                Cette solution permet aussi d’empêcher la modification de transactions déjà validées, car la moindre lettre changée modifierait le résultat du hashage, et donc tous les identifiants des blocs suivants.\r\n                </div>\r\n                <div class =\"problem\">\r\n                Problème:\r\n                </div>\r\n                <div>\r\n                Problème : \r\n                Pingouin est content du système, mais passer sa journée à faire des calculs ne le motive pas vraiment…\r\n                </div>\r\n        </div>             \r\n        )\r\n}\r\n\r\nfunction text6(){\r\n        return(<div>\r\n                Pour nous aider à résoudre ce problème, nous aurons besoin du hashage :\r\n                Le hashage, c’est un procédé informatique qui consiste à transformer de manière automatique un texte, grand ou moyen en une suite de chiffres et lettres de taille fixe. C'est un peu comme si on associait à une phrase précise un code secret unique ! On peut comparer ça à une sorte d'empreinte digitale : Il est impossible de deviner l'identité de quelqu'un sur base de son empreinte digitale, si la personne ne l'a jamais partagée. Par contre, une fois qu'on lui a demandé son empreinte digitale, on sait que cette empreinte digitale appartient à lui et à lui seul.\r\n                De la même manière, si on nous donne un hashage au hasard, il est impossible de retrouver le texte initial. C’est très utile, car cela a plein d’utilisations: par exemple, on peut vérifier facilement qu'un texte n'a pas été modifié. Au lieu de comparer les textes lettres par lettres, il suffit de chacun les hasher, et voir si les résultats sont identiques. La moindre lettre de différence dans le texte de base aurait complètement changé le hashing de celui-ci !\r\n\r\n        </div>        \r\n        )\r\n}\r\n\r\n// On place la machine de hashage\r\n\r\nfunction text7(moneyname){\r\n        return(<div>\r\n                <div>\r\n                Le chef du village réagit : Après chaque cycle, l’habitant ayant fourni la proof of work recevra 10 {moneyname}s créés juste pour lui, qu’il peut dépenser comme il l’entend. Ainsi, cela motive les habitants à lutter pour la sécurité de tous !\r\n                </div> \r\n                <div class =\"problem\">\r\n                Problème:\r\n                </div>\r\n                <div>\r\n                Le village grandit et le système {moneyname} a beaucoup de succès ! Mais il grandit tellement, qu’au final, Pingouin n’arrive plus jamais à trouver d'identifiant. Quelqu’un de plus rapide réussit toujours avant lui. Il n'est plus très motivé...\r\n                </div>\r\n        </div>        \r\n        )\r\n}\r\n\r\nfunction text8(){\r\n        return(<div>\r\n                <div>\r\n                Au lieu de travailler tout seul, des habitants du village décident de former une équipe et s’organiser pour avoir plus de chance de trouver la proof of work. Ils se répartissent la tâche pour optimiser leurs chances, et se partagent les gains en cas de réussite. Par exemple, Grenouille se charge des identifiants commençant par 5, et Paresseux se charge des identifiants commençant par 6. Leur temps est mieux utilisé car ils sont garantis de ne jamais tester le même nombre qu’un autre du groupe a déjà testé ! Les membres du groupes gagnent donc plus souvent, mais les gains sont partagés.\r\n                </div> \r\n        </div>        \r\n        )\r\n}\r\n\r\nfunction text9(){\r\n        return(<div>\r\n                <div>\r\n                Cela a pris du temps... Mais finalement, l'entièreté du village semble avoir trouvé une solution qui leur convient. Le système de Blockchain en proof en work fonctionne du tonnerre et on n'entend plus beaucoup parler de Renard. Le Chef du village tient à vous remercier pour votre aide et organise une grande fête en votre honneur ! Félicitations !\r\n                </div> \r\n        </div>        \r\n        )\r\n        // Dessin fête\r\n}\r\n\r\nexport {introtext1, introtext2, introtext3, introtext4, text1, text2, text3, text4, text5, text6, text6_1, text7, text8, text9}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}