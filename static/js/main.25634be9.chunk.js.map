{"version":3,"sources":["blockchain.js","Test.js","App.js","reportWebVitals.js","index.js"],"names":["Transaction","from","to","amount","validated","this","Carnet","property","startmoney","transactions","neighbors","villagers","i","push","transaction","checkAccount","addTransaction","console","log","transmitTransaction","exclude","assert","isValidated","sendTransaction","destination","receiveTransaction","Village","animals","index","length","getCarnets","setNeighbors","getCarnet","VillageBlock","Component","props","state","village","fulltext","SHA256","require","hashing","number","toString","HashingBlock","handleChange","e","setState","hashword","target","value","hashed","baseword","className","type","onChange","class","grencarnet","getTransactions","BlocTest","HandlingBlock","incrementDistance","bind","changeName","distance","moneyname","newname","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25634be9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n// Village and transactions machines\r\n\r\n// Class definition\r\n\r\nconst animals = [\"Paresseux\", \"Pingouin\", \"Toucan\", \"Grenouille\", \"Singe\", \"Chat\"]\r\nconst neighbors = {\"Paresseux\" : {\"Toucan\" : 2, \"Grenouille\" : 2}, \"Pingouin\" : {\"Grenouille\" : 1}, \"Toucan\" : {\"Paresseux\" : 2, \"Chat\" : 1}, \"Grenouille\" : {\"Paresseux\" : 2, \"Singe\" : 1 ,\"Pingouin\" : 1}, \"Singe\" : {\"Grenouille\" : 1}, \"Chat\" : {\"Toucan\" : 1}}\r\n\r\nclass Transaction{\r\n        constructor(from, to, amount, validated){\r\n                this.from = from;\r\n                this.to = to;\r\n                this.amount = amount;\r\n                this.validated = validated;\r\n        }\r\n\r\n        isValidated(){\r\n                return this.validated;\r\n        }\r\n\r\n        getAmount(){\r\n                return this.amount;\r\n        }\r\n\r\n        validate(){\r\n                this.validated = true;\r\n        }\r\n}\r\n\r\nclass Carnet{\r\n        constructor(property, startmoney){\r\n                this.property = property;\r\n                this.transactions = [];\r\n                this.startmoney = startmoney;\r\n                this.neighbors = {};\r\n        }\r\n\r\n        setNeighbors(neighbors, villagers){\r\n                for (var i in neighbors){\r\n                        this.neighbors[i] = []\r\n                        this.neighbors[i].push(villagers[i])\r\n                        this.neighbors[i].push(neighbors[i])\r\n                }\r\n                \r\n        }\r\n\r\n        addTransaction(transaction){\r\n                this.transactions.push(transaction)\r\n                // console.assert(this.transactions.filter().length < 2)\r\n        }\r\n\r\n        getTransactions(){\r\n                return this.transactions\r\n        }\r\n\r\n        checkAccount(){\r\n\r\n                let validity = true\r\n\r\n                if(validity){\r\n                        return true\r\n                }\r\n                else{\r\n                        return false\r\n                }\r\n                \r\n        }\r\n\r\n        receiveTransaction(transaction, from){\r\n\r\n                //vérifie que la transaction est compatible avec les autres\r\n                //si oui, l'ajoute, si non, envoie une erreur\r\n\r\n                if (!this.checkAccount()){\r\n                        throw \"An invalid transaction has been received !\"\r\n                }\r\n\r\n                this.addTransaction(transaction)\r\n                \r\n                console.log(\"Transaction received !\")\r\n                console.log(this.property)\r\n                console.log(transaction)\r\n        \r\n                //transmet ensuite la transaction aux voisins, sauf au from\r\n                this.transmitTransaction(transaction, from)\r\n        }\r\n\r\n        transmitTransaction(transaction, exclude){\r\n                console.assert(transaction.isValidated(), \"Trying to transmit a invalidated transaction\");\r\n\r\n                for (var i in this.neighbors){\r\n                        if (i !== exclude){\r\n                                this.sendTransaction(transaction, this.neighbors[i])\r\n                        }\r\n                }\r\n\r\n                //assert que la transaction est validée\r\n        }\r\n\r\n        sendTransaction(transaction, destination){\r\n                //envoie une transaction à un autre carnet, après avoir attendu le temps qu'il faut\r\n                //setTimeout({ peer.receiveTransaction(transaction, this.property) }, getMillisecondsFromDistance(peer));\r\n                destination[0].receiveTransaction(transaction, this.property)\r\n        }\r\n\r\n}\r\n\r\nclass Village{\r\n        constructor(startmoney, animals, neighbors){\r\n                this.startmoney = startmoney;\r\n                this.villagers = {};\r\n\r\n                // Creatings villagers transaction lists\r\n                for (let index = 0; index < animals.length; index++) {\r\n                        this.villagers[animals[index]] = new Carnet(animals[index], startmoney)\r\n                }\r\n\r\n                // Assigning neighbors\r\n                for (let index = 0; index < animals.length; index++) {\r\n                        this.getCarnets()[animals[index]].setNeighbors(neighbors[animals[index]], this.getCarnets())\r\n                }\r\n        }\r\n\r\n        getCarnets(){\r\n                return this.villagers;\r\n        }\r\n\r\n        getCarnet(property){\r\n                return this.villagers[property]\r\n        }\r\n\r\n        addTransaction(property, from, to, amount, validated){\r\n                this.getCarnet(property).addTransaction(new Transaction(from, to, amount, validated))\r\n        }\r\n}\r\n\r\n// Component displaying a transaction list\r\n\r\nclass CarnetBlock extends Component {\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {carnet : this.props.carnet}\r\n        }\r\n\r\n        //ajouter une fonction pour valider et transmettre une transaction\r\n                \r\n        render(){\r\n                var fulltext = []\r\n                for (let index = 0; index < this.state.carnet.getTransactions().length; index++) {\r\n                        fulltext.push(<div> {this.state.carnet.getTransactions()[index].getAmount()} </div>);\r\n                    }\r\n                return(\r\n                        <div>\r\n                                {fulltext}\r\n                        </div>\r\n                )\r\n        }\r\n\r\n}\r\n\r\n//Component displaying a transaction line\r\n\r\nclass TransactionLine extends Component{\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {transaction : this.state.transaction}\r\n        }\r\n\r\n        handleChangeAmount = (e) => {\r\n                this.setState({amount : (e.target.value)})\r\n                }\r\n\r\n        validate = (e) => {\r\n\r\n        }\r\n                \r\n        render(){\r\n                if (this.state.validated){\r\n                        return(\r\n                                <div className=\"centeredtext\">\r\n                                        {this.state.amount}\r\n                                </div>\r\n                        )\r\n                }\r\n                else{\r\n                        return(\r\n                                <div className=\"centeredtext\">\r\n                                        <form>\r\n                                                <input type=\"text\" value={this.state.amount} onChange={this.handleChangeAmount} class=\"input\"/>\r\n                                        </form>\r\n                                        {this.state.amount}\r\n                                </div>\r\n                        )\r\n                }\r\n                \r\n        }\r\n}\r\n\r\n//Component displaying a transaction line\r\n\r\nclass VillageBlock extends Component {\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {village : this.props.village}\r\n        }\r\n                \r\n        render(){\r\n                var fulltext = []\r\n\r\n                for (let index = 0; index < this.state.village.getCarnets().length; index++) {\r\n                        fulltext.push(<div> {this.state.village.getCarnets()[index]} </div>);\r\n                    }\r\n\r\n                console.log(this.state.village)\r\n\r\n                return(\r\n                        <div>\r\n                                {fulltext}\r\n                        </div>\r\n                )\r\n        }\r\n\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n\r\n// Hashing machine\r\n\r\nconst SHA256 = require(\"crypto-js/sha256\");\r\n\r\nfunction hashing(number){\r\n        return SHA256(number).toString()\r\n}\r\n\r\nclass HashingBlock extends Component {\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {hashword : this.props.baseword, hashed : hashing(this.props.baseword)}\r\n        }\r\n        \r\n        handleChange = (e) => {\r\n        this.setState({hashword : (e.target.value)})\r\n        this.setState({hashed : hashing(e.target.value)})\r\n        }\r\n        \r\n        render(){\r\n                return(\r\n                        <div className=\"centeredtext\">\r\n                                <form>\r\n                                        <input type=\"text\" value={this.state.hashword} onChange={this.handleChange} class=\"input\"/>\r\n                                </form>\r\n                                <div class=\"centeredelement\">\r\n                                <div class=\"output\">\r\n                                {this.state.hashed}\r\n                                </div>\r\n                                </div>\r\n                        </div>\r\n                )\r\n        }\r\n}\r\n\r\nexport {hashing, HashingBlock, TransactionLine, Transaction, CarnetBlock, Carnet, Village, VillageBlock, animals, neighbors}","import React, { Component } from 'react'\r\nimport {Transaction, CarnetBlock, Carnet, animals, neighbors, VillageBlock, Village } from './blockchain';\r\n\r\nlet village = new Village(10, animals, neighbors);\r\nvillage.addTransaction(\"Grenouille\", \"Paresseux\", \"Toucan\", 6, true)\r\nlet grencarnet = village.getCarnet(\"Grenouille\");\r\ngrencarnet.transmitTransaction(grencarnet.getTransactions()[0], \"Singe\")\r\n\r\nclass BlocTest extends Component{\r\n\r\n  render(){\r\n    return <div>\r\n      <VillageBlock village={village}/>\r\n      </div>\r\n  }\r\n}\r\n\r\nexport {BlocTest}","// Imports\r\n\r\nimport './App.css';\r\nimport React, { Component } from 'react'\r\nimport {introtext1, introtext2, introtext3, introtext4, text1, text2, text3, text4, text5, text6, text6_1, text7, text8, text9} from './Blocs.js'\r\nimport {HashingBlock} from './blockchain.js'\r\nimport {BlocTest} from './Test.js'\r\n\r\n/*\r\nHere you can change the base parameters of the website\r\n\r\nPick another startdistance if you want to start the story further (From 1 to 13)\r\nPick another defaultname if you want to change the default name of the currency\r\nPick another baseword if you can to change the default word of the hash machine\r\nSet test to true if you want to load a test version of the website\r\n*/\r\nconst startdistance = 1\r\nconst defaultname = \"Toycoin\"\r\nconst baseword = \"Bonjour\"\r\n\r\nconst test = true\r\n\r\nclass HandlingBlock extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.incrementDistance = this.incrementDistance.bind(this)\r\n    this.changeName = this.changeName.bind(this)\r\n    this.state = {distance: startdistance, moneyname: defaultname};\r\n    console.log(\"Voici l'état initial du state\")\r\n    console.log(this.state)\r\n  }\r\n\r\n  incrementDistance() {\r\n    if(this.state.distance < 13){\r\n      console.log(\"We move forward in the document. New distance:\");\r\n      console.log(this.state.distance);\r\n      this.setState({distance: this.state.distance+1});\r\n    }\r\n    console.assert(this.state.distance <= 13)\r\n  }\r\n\r\n  changeName(newname) {\r\n    console.log(\"This is the old money name: \" + this.state.moneyname)\r\n    this.setState({moneyname: newname})\r\n    console.log(\"The name is changed to \" + this.state.moneyname)\r\n  }\r\n\r\n  render(){ \r\n    if(test){\r\n      return <BlocTest/>\r\n    }\r\n\r\n    var fulltext = [];\r\n\r\n    if (this.state.distance === 1){\r\n      console.log(\"Entered Intro Block 1\")\r\n      return (\r\n      <div> <BlocIntro1 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n      </div>\r\n      )  \r\n    }\r\n    if (this.state.distance ===2){\r\n      console.log(\"Entered Intro Block 2\")\r\n      return (\r\n      <div>\r\n        <BlocIntro2 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n      </div>\r\n      )\r\n    }\r\n    if (this.state.distance ===3){\r\n      console.log(\"Entered Intro Block 3\")\r\n      return (\r\n      <div><BlocIntro3 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n      </div>\r\n      )\r\n    }\r\n    if (this.state.distance ===4){\r\n      console.log(\"Entered Intro Block 4\")\r\n      return (\r\n      <div><BlocIntro4 onDistanceChange={this.incrementDistance} onNameChange={this.changeName} distance={this.state.distance} moneyname={this.state.moneyname}/>\r\n      </div>\r\n      )\r\n    }\r\n    if (this.state.distance >= 5){\r\n      console.log(\"Entered Block 1\")\r\n      fulltext.push(<div><Bloc1 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >= 6){\r\n      console.log(\"Entered Block 2\")\r\n      fulltext.push(<div>\r\n        <Bloc2 onDistanceChange={this.incrementDistance} distance={this.state.distance} moneyname={this.state.moneyname}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=7){\r\n      console.log(\"Entered Block 3\")\r\n      fulltext.push(<div><Bloc3 onDistanceChange={this.incrementDistance} distance={this.state.distance} moneyname={this.state.moneyname}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=8){\r\n      console.log(\"Entered Block 4\")\r\n      fulltext.push(<div><Bloc4 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=9){\r\n      console.log(\"Entered Block 5\")\r\n      fulltext.push(<div><Bloc5 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=10){\r\n      console.log(\"Entered Block 6\")\r\n      fulltext.push(\r\n        <div>\r\n          <div>\r\n            <Bloc6 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n          </div>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=11){\r\n      console.log(\"Entered Block 7\")\r\n      fulltext.push(<div><Bloc7 onDistanceChange={this.incrementDistance} distance={this.state.distance} moneyname={this.state.moneyname}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=12){\r\n      console.log(\"Entered Block 8\")\r\n      fulltext.push(<div><Bloc8 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n    if (this.state.distance >=13){\r\n      console.log(\"Entered Block 9\")\r\n      fulltext.push(<div><Bloc9 onDistanceChange={this.incrementDistance} distance={this.state.distance}/>\r\n        </div>)\r\n    }\r\n\r\n    fulltext.push(<div><br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> </div>)\r\n\r\n    return fulltext;\r\n  }\r\n}\r\n\r\nclass BlocIntro1 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener('mousedown', this.handleClick, false);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener('mousedown', this.handleClick, false);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"The screen is clicked\")\r\n    this.props.onDistanceChange();\r\n  }\r\n\r\n  render(){\r\n    return <div class=\"centeredscreen\">\r\n    <div class=\"paragraph centeredtext\"> \r\n    <div>\r\n      {introtext1()}\r\n    </div>\r\n    </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass BlocIntro2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener('mousedown', this.handleClick, false);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener('mousedown', this.handleClick, false);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"The screen is clicked\")\r\n    this.props.onDistanceChange();\r\n  }\r\n  render(){\r\n    return <div class=\"centeredscreen\">\r\n    <div class=\"paragraph centeredtext\"> \r\n    <div>\r\n      {introtext2()}\r\n    </div>\r\n    </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass BlocIntro3 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"The button is clicked\")\r\n    this.props.onDistanceChange();\r\n  }\r\n\r\n  render(){\r\n    return <div class=\"centeredscreen\">\r\n      <div class=\"paragraph centeredtext\">\r\n      <div>{introtext3()}</div>\r\n      <div class=\"button\" onClick={() => this.handleClick()}>Allons-y</div>\r\n      </div>\r\n      </div>\r\n  }\r\n}\r\n\r\nclass BlocIntro4 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    console.log(\"The form is submitted\")\r\n    this.props.onDistanceChange();\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.props.onNameChange(e.target.value);\r\n  }\r\n\r\n  render(){\r\n    return <div class=\"centeredscreen\">\r\n    <div class=\"paragraph centeredtext\">\r\n      <div>{introtext4()}</div>\r\n      \r\n      <form onSubmit={this.handleSubmit} class=\"marged\">\r\n        <input type=\"text\" value={this.props.moneyname} onChange={this.handleChange} class=\"input\"/>\r\n        <input type=\"submit\" value=\"Choisir ce nom\" class=\"button\" />\r\n      </form>\r\n    </div>\r\n    </div>\r\n  }\r\n}\r\n\r\n/* END OF THE INTRO */\r\n\r\nclass Bloc1 extends Component { //Notation des transactions\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener('scroll', this.handleClick, false);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener('scroll', this.handleClick, false);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    const event = e.target.scrollingElement;\r\n    console.log(\"The screen is scrolled\");\r\n    //const bottom = e.target.scrollingElement.scrollHeight - e.target.scrollingElement.scrollTop === e.target.scrollingElement.clientHeight;\r\n    const bottom = Math.abs(event.scrollHeight - (event.scrollTop + event.clientHeight)) <= 1;\r\n\r\n    if (bottom){\r\n      console.log(\"Enter the condition\")\r\n      this.props.onDistanceChange();\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return ( <div class=\"paragraph\"> <br/> <br/> <br/> <div>{text1()}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc2 extends Component { //Décentralisation de la monnaie\r\n\r\n  render(){\r\n    return (<div class=\"paragraph\"> <br/> <br/> <br/> <div>{text2(this.props.moneyname)}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc3 extends Component { //Signature électronique\r\n\r\n  render(){\r\n    return (\r\n    <div class=\"paragraph\"> <br/> <br/> <br/> \r\n      <div>\r\n        {text3(this.props.moneyname)}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc4 extends Component { //Listes d'attentes\r\n\r\n  render(){\r\n    return (<div class=\"paragraph\"> <br/> <br/> <br/> <div>{text4(this.props.moneyname)}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc5 extends Component { //Blockchain\r\n\r\n  render(){\r\n    return (<div class=\"paragraph\"> <br/> <br/> <br/> <div>{text5()}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc6 extends Component { //Proof of work\r\n\r\n  render(){\r\n    return (\r\n    <div> <br/> <br/> <br/> \r\n      <div class=\"paragraph\">\r\n        {text6()}\r\n      </div>\r\n      <div class = \"machine\">\r\n        <div class = \"paragraph\">\r\n        Tu peux essayer de hasher tes propres mots ! Tu peux par exemple essayer de hasher ton prénom.\r\n        </div>\r\n        <div>\r\n        <HashingBlock baseword = {baseword}/>\r\n        </div>\r\n        <div class = \"paragraph\">\r\n        Voici un petit défi : Essaie de trouver un mot dont le hash commence par le chiffre 5.\r\n        </div>\r\n      </div>\r\n      <div class=\"paragraph\">\r\n        {text6_1()}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc7 extends Component { //Rétribution\r\n\r\n  render(){\r\n    return (<div class=\"paragraph\"> <br/> <br/> <br/> <div>{text7(this.props.moneyname)}</div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc8 extends Component { //Travail d'équipe\r\n  \r\n  render(){\r\n    return (\r\n    <div class=\"paragraph\"> <br/> <br/> <br/> \r\n      <div>\r\n        {text8()}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Bloc9 extends Component { //Conclusion\r\n  \r\n  render(){\r\n    return (\r\n    <div class=\"paragraph\"> <br/> <br/> <br/> \r\n      <div>\r\n        {text9()}\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <HandlingBlock />\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}